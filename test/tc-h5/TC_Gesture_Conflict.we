<template>

  <TC_Support_Scroller>
    <TC_Support_MainTitle title="TC_Gesture_Conflict"></TC_Support_MainTitle>
      <text>Test gesture co</text>
      <div class="block test-div"
               onpanstart="onpanstart"
               onpanmove="onpanmove"
               onpanend="onpanend"
               onclick="onclick"
               onswipe="onswipe"
               onlongpress="onlongpress"
               ontouchstart="ontouchstart" ontouchmove="ontouchmove" ontouchend="ontouchend" ontouchcancel="ontouchcancel">
              <div style="padding:5px">
                  <text class="console-info" style="font-size:35px;"  value="{{gestureConcludeValue}}" ></text>
              </div>
      </div>
      <div style="flex-direction: column;background-color:#94d6da;margin-top:10;height:800;">
              <!-- Slider组件 -->
              <slider class="slider" interval="{{intervalValue}}" auto-play="{{isAutoPlay}}"
                      onpanstart="onpanstart"
                      onpanmove="onpanmove"
                      onpanend="onpanend"
                      onclick="onclick"
                      onswipe="onswipe"
                      onlongpress="onlongpress"
                      ontouchstart="ontouchstart" ontouchmove="ontouchmove" ontouchend="ontouchend" ontouchcancel="ontouchcancel"
                      onChange="onsliderChange">
                  <div class="slider-pages" repeat="{{itemList}}" onclick="gotoDetail" item-id="{{itemId}}">
                      <image class="img" src="{{pictureUrl}}"></image>
                      <text class="title">{{title}}</text>
                  </div>
                  <!-- 指示器子节点 -->
                  <indicator class="indicator_FFFFFF" style=""></indicator>
              </slider>
      </div>
  </TC_Support_Scroller>
</template>

<style>
.img {width: 150; height: 150;}
.slider {
        flex-direction: row;
        margin: 18;
        width: 714;
        height: 230;
  }
  .slider-pages {
        flex-direction: row;
        width: 714;
        height: 200;
  }
  .indicator {
    width:714;
    height:200;
    position:absolute;
    top:1;
    left:1;
    itemColor: red;
    itemSelectedColor: blue;
    itemSize: 20;
  }
    .indicator_FFFFFF {
    width:714;
    height:200;
    position:absolute;
    top:1;
    left:1;
    itemColor: #ff0000;
    itemSelectedColor: #0000ff;
    itemSize: 20;
  }
 .discript {flex: 1; color: #000000; font-weight: bold; font-size:30;background-color: #37dd23;overflow:hidden;font-family: "Open Sans", sans-serif;}

  .test-div{
    margin-top: 10;
    height: 400;
    background-color:#FAEBD7;
  }
  .test-title{
    color: red
  }
  .text-click{
    color:#1E90FF;
    border-color: #1E90FF;
    border-width: 3;
    margin-top: 7;
    margin-left: 5;
    margin-right: 5;
  }

  .console-info{
    color: red;
    font-size: 40;
  }

  .tc-desc{
    margin-top: 60;
  }
</style>

<script>
module.exports = {
    data: {
      gestureConcludeValue: 'watch all gestures',
      intervalValue:"3000",
      itemList: [
        {itemId: '520421163634', title: 'silder on event1', pictureUrl: 'https://gd2.alicdn.com/bao/uploaded/i2/T14H1LFwBcXXXXXXXX_!!0-item_pic.jpg'},
        {itemId: '522076777462', title: 'silder on event2', pictureUrl: 'https://gd1.alicdn.com/bao/uploaded/i1/TB1PXJCJFXXXXciXFXXXXXXXXXX_!!0-item_pic.jpg'},
        {itemId: '522076777462', title: 'silder on event3', pictureUrl: 'https://gd3.alicdn.com/bao/uploaded/i3/TB1x6hYLXXXXXazXVXXXXXXXXXX_!!0-item_pic.jpg'}
      ],

    },
    methods: {
      onpanstart:function(e){
        nativeLog("==weex gesture== onpanstart")
        if(this.showPanStart){
          var params = {
            'message':'trigger panstart event',
            'okTitle':'OK',
          }
          //this.$call('modal','alert',params,2);
        }
        if(typeof window != 'undefined')
          this.panText = 'trigger panstart -> {id:'+e.touch.identifier+',pageX:' + e.touch.pageX + ',pageY:' + e.touch.pageY + ',screenX:'+e.touch.screenX + ',screenY:'+e.touch.screenY+'}';
        else{
          this.panText = 'trigger panstart -> '+ JSON.stringify(e.changedTouches);
        }
        this.gestureConcludeValue = this.panText;

      },

      onpanmove:function(e){
        nativeLog("==weex gesture== onpanmove")
        if(typeof window != 'undefined')
          this.panText = 'trigger panmove -> {id:'+e.touch.identifier+',pageX:' + e.touch.pageX + ',pageY:' + e.touch.pageY + ',screenX:'+e.touch.screenX + ',screenY:'+e.touch.screenY+'}';
        else
          this.panText = 'trigger panmove -> ' + JSON.stringify(e.changedTouches);
        this.gestureConcludeValue = this.panText;
      },

      onpanend:function(e){
        nativeLog("==weex gesture== onpanend")
        if(typeof window != 'undefined')
          this.panText = 'trigger panend -> {id:'+e.touch.identifier+',pageX:' + e.touch.pageX + ',pageY:' + e.touch.pageY + ',screenX:'+e.touch.screenX + ',screenY:'+e.touch.screenY+'}';
        else
          this.panText = 'trigger panend -> ' + JSON.stringify(e.changedTouches);
        this.gestureConcludeValue = this.panText;

      },

      onsliderChange: function(e){

        nativeLog("==weex gesture== onsliderChange");
        var a = 0;
        a = this.i;
        this.i = a+ 1;

        this.gestureConcludeValue = "onsliderChange onsliderChange onsliderChange!! == " + this.i ;
      },
      onclick:function(e){
        nativeLog("==weex gesture== onclick")
        var params = {
          'message':'trigger click event',
          'okTitle':'OK',
        }
        this.gestureConcludeValue = "trigger click event";
        this.$call('modal','alert',params,2);
      },

      onswipe: function(e) {
        nativeLog("==weex gesture== onswipe")

          nativeLog("onswipe called");
          //console.log(e);
          this.swipeText = 'trigger swipe ' + e.direction;
          this.gestureConcludeValue = this.swipeText;
      },

      onlongpress:function(e) {
        nativeLog("==weex gesture== onlongpress")

        nativeLog("onlongpress called");
        if(typeof window != 'undefined')
        {
          this.longpressText = 'trigger longpress -> {id:'+e.touch.identifier+',pageX:' + e.touch.pageX + ',pageY:' + e.touch.pageY + ',screenX:'+e.touch.screenX + ',screenY:'+e.touch.screenY+'}';
        }
        else
        {
          this.longpressText = 'trigger longpress -> ' + JSON.stringify(e.changedTouches);
        }
        this.gestureConcludeValue = this.longpressText;

      },

    }
  }
</script>