<template>

  <TC_Support_Scroller>
    <TC_Support_MainTitle title="TC_Animation_Translate"></TC_Support_MainTitle>

    <div style = "flex-direction: column;width: 850;height: 1000;">

        <div class="btns">
            <text class="btn font" onclick="translate">Click Me To Translate</text>
            <text class="btn font" onclick="translateX">Click Me To TranslateX</text>
            <text class="btn font" onclick="translateY">Click Me To TranslateY</text>
        </div>
        <div id="block" class="block" style="transform-origin:{{transformOrigin}}">
            <text id ="id_test_value" class="font" value = {{testValue}}></text>
        </div>
    </div>

    </TC_Support_Scroller>
</template>
<style>
    


  .font{font-family: Times New Roman;font-size: 30;}

    .block {
        position: absolute;
        width: 300;
        height: 300;
        top: 350;
        left: 250;
        bottom:250;
        background-color: #FF0000;
    }
    .btns {
        width: 750;
        height: 250;

        flex-wrap: wrap;
        flex-direction: column;
    }
    .btn {
        font-weight: bold; font-size:30;
        height: 50;
        margin-left: 5;
        margin-right: 5;
        margin-top: 20;
        background-color: #CCCCCC;
        padding-top: 5;
        padding-bottom: 5;
        padding-left: 5;
        padding-right: 5;

    }
</style>
<script>
    module.exports = {
        data: {
            transformOrigin: 'center center',
            current_rotate: 0,
            current_scale: 1,
            current_color: '#FF0000',
            current_opacity: 1,
            current_translate: '',
            current_translateX:'',
            current_translateY:'',
            current_transform: '',
            isStop: true,
            testValue:"test"
        },
        methods: {
            anim: function (styles, timingFunction, duration, callback) {
                this.$call('animation','transition', this._ids.block.el.ref, {
                    styles: styles,
                    timingFunction: timingFunction,
                    duration: duration
                }, callback);
            },
            
            translate: function (e) {
                this.current_translate = this.current_translate ? '' : 'translate(50%, 50%)';
                this.anim({
                    transform: this.current_translate
                }, 'linear', 500, function (){});
                this.testValue = "current translate(50%, 50%) : "+this.current_translate;

            },
            translateX: function (e) {
                this.current_translateX = this.current_translateX ? '' : 'translateX(-400px)';
                this.anim({
                    transform: this.current_translateX
                }, 'linear', 500, function (){});
                this.testValue = "current translateX(-400px): " + this.current_translateX;
            },
            translateY: function (e) {
                this.current_translateY = this.current_translateY ? '' : 'translateY(-125px)';
                this.anim({
                    transform: this.current_translateY
                }, 'linear', 500, function (){});
                this.testValue = "current translateY(-125px) :" + this.current_translateY;
            },
            
        }
    };
</script>